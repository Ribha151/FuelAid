<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="theme-color" content="#3f51b5">
	<link href="https://fonts.googleapis.com/css?family=Dosis:200,300,400,500,700" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Overpass:300,400,400i,600,700" rel="stylesheet">
    <link rel="icon" type="image/png" href="/assets/images/FUEL AID_logo.png">

    <link rel="stylesheet" href="/assets/css/open-iconic-bootstrap.min.css">
    <link rel="stylesheet" href="/assets/css/animate.css">
    
    <link rel="stylesheet" href="/assets/css/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/css/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/css/magnific-popup.css">

    <link rel="stylesheet" href="/assets/css/aos.css">

    <link rel="stylesheet" href="/assets/css/ionicons.min.css">

    <link rel="stylesheet" href="/assets/css/bootstrap-datepicker.css">
    <link rel="stylesheet" href="/assets/css/jquery.timepicker.css">

    <link rel="stylesheet" href="/assets/css/font-awesome.min.css">
    
    <link rel="stylesheet" href="/assets/css/flaticon.css">
    <link rel="stylesheet" href="/assets/css/icomoon.css">
	<link rel="stylesheet" href="/assets/css/style.css">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
	<link rel="stylesheet" href="/assets/css/sidebar.css">
	<!-- <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" /> -->
	<!-- <link rel="stylesheet" href="/assets/css/sidebar.css"> -->
	<title> <%= typeof title != 'undefined' ? title : "Mechanic Live Track" %> </title>
</head>

<body>
	<%- include('../partials/header') %>
	<%- include('../partials/alerts') %>

<style>
   header{
		background-color: #403d3d!important;
	}
   header .navbar, .bg-dark, .navbar-dark, .navbar-light {
	background-color: #403d3d!important;
      background-image: none !important;
      box-shadow: none !important;
   }
   .text-orange{
	 color: #fc983c !important;
   }
   .logo-container img {
    height: 0.9em;
    width: auto;
}
.card {
    border-radius: 15px;
    background: #fff3e6;
}

#map {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.badge {
    font-size: 1rem;
}
.alert-success h5 {
  font-weight: 600;
  margin-bottom: 10px;
}

.alert-success a.btn {
  min-width: 120px;
}


   </style>
   
   <main>
    <%- include('../partials/mechanicSidebar') %>
  
    <div class="container mt-4" id="main-wrapper">
      <div class="bg-white shadow-sm p-3">
        <span class="me-3" id="sidebar-toggler-btn"><i class="fas fa-bars"></i></span>
        <h3 class="mb-4 d-inline-block">Live Customer Tracking</h3>
      </div>
  
      <% if (requests.length === 0) { %>
        <div class="alert alert-info">You have not accepted any requests yet.</div>
      <% } else { %>
        <% requests.forEach((req, idx) => { %>
          <div class="card mb-4 shadow-sm">
            <div class="card-body">
              <h5 class="card-title"><%= req.serviceCategory.toUpperCase() %> - Request #<%= idx + 1 %></h5>
              <p><strong>Subservices:</strong> <%= req.subServices.join(', ') %></p>
              <p><strong>Requested On:</strong> <%= req.createdAt.toLocaleString() %></p>
  
              <p><strong>Customer:</strong>
                <%= req.customer.firstName %> <%= req.customer.lastName %> | <%= req.customer.phone %>
              </p>
  
              <p><strong>Location:</strong>
                <%= req.address %>
              </p>
              <p><strong>Status:</strong> <span id="status-<%= idx %>">Calculating...</span></p>
              <p><strong>Time to reach:</strong> <span id="eta-<%= idx %>">Calculating...</span></p>
  
              <div id="map-<%= idx %>" style="height: 300px; border-radius: 10px;" class="mb-2"></div>
  
            </div>
          </div>
        <% }) %>
      <% } %>
    </div>
  </main>

  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="/socket.io/socket.io.js"></script>

  <div id="tracking-data" data-requests='<%- JSON.stringify(requests) %>'></div>

  <script>
    const socket = io(); // Connect to Socket.io
  
    const requestData = document.getElementById('tracking-data').dataset.requests;
    const requests = JSON.parse(requestData);
  
    const mechanicMarkers = {}; // mechanicId => array of { map, marker, request, requestIndex }
  
    requests.forEach((req, idx) => {
      if (!req.mechanic) return;
  
      const map = L.map(`map-${idx}`).setView([req.latitude, req.longitude], 13);
  
      L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
      }).addTo(map);
  
      // Customer marker
      L.marker([req.latitude, req.longitude], {
        icon: L.icon({
          iconUrl: 'https://cdn-icons-png.flaticon.com/512/1946/1946433.png',
          iconSize: [30, 30],
        })
      }).addTo(map).bindPopup("Customer's Location").openPopup();
  
      const mechanicId = req.mechanic._id;
      const mechanicLatLng = [req.mechanic.latitude, req.mechanic.longitude];
  
      const mechanicMarker = L.marker(mechanicLatLng, {
        icon: L.icon({
          iconUrl: 'https://cdn-icons-png.flaticon.com/512/854/854878.png',
          iconSize: [30, 30],
        })
      }).addTo(map);
      mechanicMarker.bindPopup("Your Location").openPopup();
  
      const waveLine = L.polyline([
        [req.latitude, req.longitude],
        [req.mechanic.latitude, req.mechanic.longitude]
      ], {
        color: 'blue',
        weight: 3,
        opacity: 0.7,
        dashArray: '10,10',
      }).addTo(map);
  
      // Store data for later updates
      if (!mechanicMarkers[mechanicId]) {
        mechanicMarkers[mechanicId] = [];
      }
  
      // Store the request and index for this map
      mechanicMarkers[mechanicId].push({
        map,
        marker: mechanicMarker,
        request: req,
        requestIndex: idx,
        customerLatLng: [req.latitude, req.longitude]
      });
    });
  
    // Function to estimate haversine distance
    function haversineDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radius of the Earth in km
      const toRad = angle => angle * (Math.PI / 180);
  
      const dLat = toRad(lat2 - lat1);
      const dLon = toRad(lon2 - lon1);
      const a = Math.sin(dLat / 2) ** 2 +
                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                Math.sin(dLon / 2) ** 2;
  
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c; // in km
    }
  
    // Function to estimate ETA in minutes
    function estimateArrivalTime(distanceInKm) {
  const avgSpeed = 40; // km/h
  const timeInHours = distanceInKm / avgSpeed;
  const totalMinutes = Math.round(timeInHours * 60);

  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;

  if (hours > 0) {
    return `${hours} hr${hours > 1 ? 's' : ''} ${minutes} min${minutes !== 1 ? 's' : ''}`;
  } else {
    return `${minutes} min${minutes !== 1 ? 's' : ''}`;
  }
}

  
    // Socket listener to update all relevant maps
    socket.on('updateMechanicLocation', ({ mechanicId, lat, lng }) => {
      console.log(`Received update for ${mechanicId}: ${lat}, ${lng}`);
  const mechanicInstances = mechanicMarkers[mechanicId];
  if (mechanicInstances) {
    mechanicInstances.forEach(({ map, marker, customerLatLng, requestIndex }) => {
      const distance = haversineDistance(lat, lng, customerLatLng[0], customerLatLng[1]);

      let statusText = "";
      const eta = estimateArrivalTime(distance);

      document.getElementById(`eta-${requestIndex}`).textContent = eta;

      if (distance < 0.1) {
        statusText = "At customer's location.";
      }  else {
        statusText = "On the way.";
      }

      document.getElementById(`status-${requestIndex}`).textContent = statusText;

      // Update marker position
      marker.setLatLng([lat, lng]).bindPopup("You (Live)").openPopup();
      map.panTo([lat, lng]);

      // Optional: Update line between mechanic and customer
      if (marker._line) {
        marker._line.setLatLngs([customerLatLng, [lat, lng]]);
      } else {
        marker._line = L.polyline([customerLatLng, [lat, lng]], {
          color: 'blue',
          weight: 3,
          opacity: 0.7,
          dashArray: '10,10',
        }).addTo(map);
      }
    });
  }
});

  </script>
  
  <script>
		// const socket = io();
		const mechanicId = "<%= currentUser._id %>";
		
		let simulatedLat = 28.628151; // Starting latitude
let simulatedLng = 77.367783; // Starting longitude

function simulateLocation() {
    // Simulate movement
    simulatedLat += 0.0001;
    simulatedLng += 0.0001;

    // Log the updated location
    console.log(`Simulated location: (${simulatedLat}, ${simulatedLng})`);

    // Emit the simulated location to the server
    socket.emit('mechanicLocationUpdate', {
        mechanicId,
        lat: simulatedLat,
        lng: simulatedLng
    });
}

// Start the simulation
setInterval(simulateLocation, 5000);

	  </script> 

    <!-- <script>
	  const socket = io();
	
	  const mechanicId = "<%= currentUser._id %>";
	
	  function sendLocation() {
		if ('geolocation' in navigator) {
		  navigator.geolocation.getCurrentPosition((pos) => {
			const { latitude, longitude } = pos.coords;
	
			socket.emit('mechanicLocationUpdate', {
			  mechanicId,
			  lat: latitude,
			  lng: longitude
			});
		  });
		}
	  }
	
	  sendLocation(); // Initial location push
	  setInterval(sendLocation, 10000); // Update every 10 seconds
	</script> -->
	
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
	<script src="/assets/js/script.js"></script>
	<!-- <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script> -->
</body>
</html>